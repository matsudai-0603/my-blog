#!/usr/bin/env python3
from pathlib import Path
import re
import datetime as dt
import html

ROOT = Path(__file__).resolve().parents[1]
OUT = ROOT / "out"

MONTH_DIR_RE = re.compile(r"^20\d{4}$")       # 例: 202501
DAY_FILE_RE  = re.compile(r"^(20\d{6})\.txt$")  # 例: 20250101.txt

def month_label(yyyymm: str) -> str:
    y, m = int(yyyymm[:4]), int(yyyymm[4:])
    return f"{y}年{m:02d}月"

def text_to_html(text: str) -> str:
    # 改行・段落処理 + URL自動リンク
    text = text.replace("\r\n", "\n").replace("\r", "\n")
    paras = [p.strip("\n") for p in re.split(r"\n\s*\n", text)]
    url_re = re.compile(r"(https?://[^\s<]+)")
    parts = []
    for p in paras:
        esc = html.escape(p)
        esc = url_re.sub(r'<a href="\1" target="_blank" rel="noopener">\1</a>', esc)
        esc = esc.replace("\n", "<br>")
        parts.append(f"<p>{esc}</p>")
    return "\n".join(parts)

def render_page(title: str, body_html: str, breadcrumb=None) -> str:
    bc_html = ""
    if breadcrumb:
        bc_html = '<nav class="breadcrumbs">' + " &raquo; ".join(breadcrumb) + "</nav>"
    now = dt.datetime.now().isoformat(timespec="seconds")
    return f"""<!doctype html>
<html lang="ja">
<head>
<meta charset="utf-8">
<meta name="viewport" content="width=device-width, initial-scale=1">
<title>{html.escape(title)}</title>
<style>
:root {{
  --maxw: 900px; --pad: 16px; --fg: #222; --muted: #666; --bg: #fff; --border: #eee;
}}
* {{ box-sizing: border-box; }}
body {{ margin: 0; font-family: -apple-system,BlinkMacSystemFont,"Segoe UI",Noto Sans JP,Roboto,Helvetica,Arial,"Apple Color Emoji","Segoe UI Emoji"; color: var(--fg); background: var(--bg); }}
header, main, footer {{ max-width: var(--maxw); margin: 0 auto; padding: 12px var(--pad); }}
a {{ text-decoration: none; }} a:hover {{ text-decoration: underline; }}
h1 {{ font-size: 1.6rem; margin: 24px 0 8px; }}
h2 {{ font-size: 1.2rem; margin: 28px 0 6px; border-bottom: 1px solid var(--border); padding-bottom: 4px; }}
.time {{ color: var(--muted); font-size: .9rem; }}
.breadcrumbs {{ font-size: .85rem; color: var(--muted); margin-top: 6px; }}
.card {{ border: 1px solid var(--border); border-radius: 8px; padding: 12px; margin: 16px 0; background: #fff; }}
ul.months {{ list-style: none; padding: 0; }}
ul.months li {{ padding: 10px 0; border-bottom: 1px dashed var(--border); }}
footer {{ margin: 40px 0 60px; font-size: .85rem; color: var(--muted); }}
</style>
</head>
<body>
<header>
  <h1>{html.escape(title)}</h1>
  {bc_html}
</header>
<main>
{body_html}
</main>
<footer>
  <p>Generated by Python. 最終更新: {now}</p>
</footer>
</body>
</html>"""

def build():
    OUT.mkdir(parents=True, exist_ok=True)
    (OUT / ".nojekyll").write_text("", encoding="utf-8")

    months_meta = []  # トップページ用
    # 月フォルダを新しい順（文字列降順でOK）に処理
    for month_dir in sorted(
        (p for p in ROOT.iterdir() if p.is_dir() and MONTH_DIR_RE.match(p.name)),
        key=lambda p: p.name,
        reverse=True
    ):
        yyyymm = month_dir.name
        entries = []
        for f in month_dir.iterdir():
            m = DAY_FILE_RE.match(f.name)
            if not m:
                continue
            day_str = m.group(1)
            if day_str[:6] != yyyymm:
                continue
            date = dt.datetime.strptime(day_str, "%Y%m%d").date()
            txt = f.read_text(encoding="utf-8")
            entries.append({
                "date": date,
                "date_str": day_str,
                "content": text_to_html(txt),
                "filename": f.name
            })

        entries.sort(key=lambda e: e["date"], reverse=True)  # 新しい日付が上
        month_out = OUT / yyyymm
        month_out.mkdir(parents=True, exist_ok=True)

        if entries:
            sections = []
            for e in entries:
                sections.append(
                    f'<article class="card" id="{e["date_str"]}">'
                    f'<h2>{e["date"].strftime("%Y-%m-%d")}（{e["date_str"]}）</h2>'
                    f'{e["content"]}'
                    f"</article>"
                )
            body_html = '\n'.join(sections)
            newest = entries[0]["date"]
            num = len(entries)
        else:
            body_html = "<p>まだ記事がありません。</p>"
            newest, num = None, 0

        page_html = render_page(
            f"{month_label(yyyymm)}のブログ",
            f'<p><a href="../">← トップへ戻る</a></p>\n{body_html}',
            breadcrumb=[f'<a href="../">トップ</a>', month_label(yyyymm)]
        )
        (month_out / "index.html").write_text(page_html, encoding="utf-8")

        months_meta.append({
            "yyyymm": yyyymm,
            "label": month_label(yyyymm),
            "num": num,
            "newest": newest
        })

    # トップページ
    if months_meta:
        items = []
        for m in months_meta:
            newest_text = m["newest"].strftime("%Y-%m-%d") if m["newest"] else "—"
            items.append(
                f'<li><a href="./{m["yyyymm"]}/">{m["label"]}</a> '
                f'<span class="time">（{m["num"]}件・最新 {newest_text}）</span></li>'
            )
        body = "<ul class=\"months\">\n" + "\n".join(items) + "\n</ul>"
    else:
        body = '<p>まだ月別フォルダがありません。例: <code>202501/20250101.txt</code></p>'

    index_html = render_page("ブログ", body)
    (OUT / "index.html").write_text(index_html, encoding="utf-8")

if __name__ == "__main__":
    build()

